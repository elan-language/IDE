# c7af523ddf163bb3fe3bb7f3a00e15cca9ebbb230bfeb632cf56f60a683512f0 Elan v0.1 valid

main

end main

class GridGraph
  constructor(gridSize as Int)
    set nodes to new List<of Point>() # Temp solution - need a proper Set
    set property.gridSize to gridSize
    call setBlock((new* Point(0, 0)), (new* Point(gridSize - 1, gridSize - 1)), true)
  end constructor

  property gridSize as Int

  property as [Point]

  procedure setBlock(p1 Point, p2 Point, add as Boolean)
    # TODO: check that p1, p2 are in right order!
    for x from p1.x to p2.x step 1
      for y from p1.y to p2.y step 1
        var p set to new Point(x, y)
        if add
          set nodes to nodes + p
          else
            throw "not implemented"
        end if
      end for
    end for
  end procedure

  function nodeExists(p Point) return Boolean
    return nodes.contains(p)
  end function

  function pointsAreAdjacentDiagonally(p1 Point,p2 Point) return Boolean
    return absolute(p1.x - p2.x) is 1 and absolute(p1.y - p2.y) is 1
  end function

  # Assumes that it will only be called if the points ARE immediate neighbours
  function findEdge(p1 Point, p2 Point) return Float
    return p1.distanceFrom(p2)
  end function

  # Returns a list of nodes that can be reached from the specified node
  function neighbours(p Point) return [Point]
    var list set to [ new Point(p.x, p.y-1),new* Point(p.x+1, p.y-1),new* Point(p.x+1, p.y),new* Point(p.x+1, p.y+1),new* Point(p.x, p.y+1),new* Point(p.x-1, p.y+1), new Point(p.x-1, p.y),new* Point(p.x-1, p.y-1) ]
    return list.filter(lambda n => nodeExists(n)).asList()
  end function

  # Returns a list of nodes, from source to destination, representing the shortest path, using dijkstra's algorithm
  # You may make use of existing methods such a s Neignbours, or findEdge.
  procedure shortestPath(source Point, destination Point, alg Algorithm,  as [Point])
    # Initialise the 'table' with three 'columns' - one 'row' per node
    var visited set to newDictionaryOfAllPointsReturningFalseValues()
    var costFromSource set to  newDictionaryOfAllPointsReturningDoublesSetToInfinity()
    var via set to newDictionaryOfAllPointsReturningNull()
    # Set start
    var currentNode set to source
    set costFromSource to costFromSource.setItem(currentNode, 0)
    # Iterate until shortest path found
    while currentNode is not destination
      set visited to visited.setItem(currentNode,true)
      call updateCostAndViaOfEachNeighbourIfApplicable(costFromSource, via, currentNode, destination)
      set currentNode to nextNodeToVisit(currentNode, visited, costFromSource, destination, alg)
      if costFromSource[currentNode] is infinity
        throw "Cannot reach destination -  graph is 'disconnected'"
        else

      end if
    end while
    set route to retraceRoute(destination, source, via)
  end procedure

  function newDictionaryOfAllPointsReturningNull() return [Point:Point]
    var dict set to new Dictionary<of Point, Point>()
    each p in nodes
      set dict to dict.setItem(p, default Point)
    end each
    return dict
  end function

  function newDictionaryOfAllPointsReturningDoublesSetToInfinity() return [Point:Float]
    var dict set to new Dictionary<of Point, Float>()
    each p in nodes
      set dict to dict.setItem(p, infinity)
    end each
    return dict
  end function

  function newDictionaryOfAllPointsReturningFalseValues() return [Point:Boolean]
    var dict set to new Dictionary<of Point, Boolean>()
    each p in nodes
      set dict to dict.setItem(p, false)
    end each
    return dict
  end function

  # needs converting to a function as dictionaries are immutable
  procedure updateCostAndViaOfEachNeighbourIfApplicable(costFromSource [Point:Float], via [Point:Point],  currentNode Point,  destination Point)
    each neighbour in neighbours(currentNode)
      var newCost set to costFromSource[currentNode] + findEdge(currentNode, neighbour)
      if newCost < costFromSource[neighbour]
        set costFromSource to costFromSource.setItem(neighbour, newCost) # Wrong -  don't update cost to estimate -  update to actual. Use estimate to choose the lowest cost unvisited node only. 
        set via to via.setItem(neighbour,currentNode)
      end if
    end each
  end procedure

  function estimatedCostToDestination(current Point, destination Point) return Float
    return sqrt((current.x - destination.x) ^ 2 + (current.y - destination.y) ^ 2)
  end function

  function nextNodeToVisit(currentNode Point, visited [Point:Boolean], costFromSource [Point:Float], destination Point ,alg Algorithm) return Point
    var lowestCostSoFar set to infinity
    var lowestCostNode set to nodes.element(0)
    var possibilities set to nodes.filter(lambda n =>  not visited[n] and costFromSource[n] < infinity)
    each p in possibilities
      var cost set to 0.0
      switch alg
        case Algorithm.dijkstra
          set cost to costFromSource[p]
        case Algorithm.optimistic
          set cost to estimatedCostToDestination(p, destination)
        case Algorithm.aStar
          set cost to costFromSource[p] + estimatedCostToDestination(p, destination)
        default

      end switch
      if cost < lowestCostSoFar
        set lowestCostSoFar to cost
        set lowestCostNode to p
      end if
    end each
    return lowestCostNode
  end function

  function retraceRoute(destination Point, source Point, via [Point:Point]) return [Point]
    var result set to [ destination ]
    var currentNode set to destination
    while currentNode is not source
      var previous set to via[currentNode]
      set result to result.insert(0, previous)
      set currentNode to previous
    end while
    return result
  end function

  function sumOfEdges(route [Point]) return Float
    var result set to 0.0
    var stage set to 0
    while stage < route.length() - 1
      set result to result + findEdge(route[stage], route[stage + 1])
      set stage to stage + 1
    end while
    return result
  end function

  function asString() return String
    return "a GridGraph"
  end function

end class

immutable class Point
  constructor(x as Int, y as Int)
    set property.x to x
    set property.y to y
  end constructor

  property x as Int

  property y as Int

  function distanceFrom(p2 Point) return Float
    return sqrt((p2.x - x)^2 + (p2.y - y)^2)
  end function

  function asString() return String
    return "a GridGraph"
  end function

end class

enum Algorithm
  dijkstra, optimistic, aStar
end enum

# big enough for this purpose
constant infinity set to 1000000.0
